# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
from baml_py import type_builder
from baml_py import baml_py
# These are exports, not used here, hence the linter is disabled
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder # noqa: F401 # pylint: disable=unused-import
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME

class TypeBuilder(type_builder.TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["Author","BaseUnit","Citation","Compound","FAIRFluidsDocument","Fluid","Measurement","Parameter","ParameterValue","Property","PropertyValue","UnitDefinition","Version",]
        ), enums=set(
          ["LitType","Method","Parameters","Properties","UnitType",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)

    # #########################################################################
    # Generated enums 5
    # #########################################################################

    @property
    def LitType(self) -> "LitTypeViewer":
        return LitTypeViewer(self)

    @property
    def Method(self) -> "MethodViewer":
        return MethodViewer(self)

    @property
    def Parameters(self) -> "ParametersViewer":
        return ParametersViewer(self)

    @property
    def Properties(self) -> "PropertiesViewer":
        return PropertiesViewer(self)

    @property
    def UnitType(self) -> "UnitTypeViewer":
        return UnitTypeViewer(self)


    # #########################################################################
    # Generated classes 13
    # #########################################################################

    @property
    def Author(self) -> "AuthorViewer":
        return AuthorViewer(self)

    @property
    def BaseUnit(self) -> "BaseUnitViewer":
        return BaseUnitViewer(self)

    @property
    def Citation(self) -> "CitationViewer":
        return CitationViewer(self)

    @property
    def Compound(self) -> "CompoundViewer":
        return CompoundViewer(self)

    @property
    def FAIRFluidsDocument(self) -> "FAIRFluidsDocumentViewer":
        return FAIRFluidsDocumentViewer(self)

    @property
    def Fluid(self) -> "FluidViewer":
        return FluidViewer(self)

    @property
    def Measurement(self) -> "MeasurementViewer":
        return MeasurementViewer(self)

    @property
    def Parameter(self) -> "ParameterViewer":
        return ParameterViewer(self)

    @property
    def ParameterValue(self) -> "ParameterValueViewer":
        return ParameterValueViewer(self)

    @property
    def Property(self) -> "PropertyViewer":
        return PropertyViewer(self)

    @property
    def PropertyValue(self) -> "PropertyValueViewer":
        return PropertyValueViewer(self)

    @property
    def UnitDefinition(self) -> "UnitDefinitionViewer":
        return UnitDefinitionViewer(self)

    @property
    def Version(self) -> "VersionViewer":
        return VersionViewer(self)



# #########################################################################
# Generated enums 5
# #########################################################################

class LitTypeAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("LitType")
        self._values: typing.Set[str] = set([  "BOOK",  "JOURNAL",  "REPORT",  "PATENT",  "THESIS",  "CONFERENCEPROCEEDINGS",  "ARCHIVEDDOCUMENT",  "PERSONALCORRESPONDENCE",  "PUBLISHEDTRANSLATION",  "UNSPECIFIED",  ])
        self._vals = LitTypeValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "LitTypeValues":
        return self._vals


class LitTypeViewer(LitTypeAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class LitTypeValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def BOOK(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("BOOK"))
    
    @property
    def JOURNAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("JOURNAL"))
    
    @property
    def REPORT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("REPORT"))
    
    @property
    def PATENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PATENT"))
    
    @property
    def THESIS(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("THESIS"))
    
    @property
    def CONFERENCEPROCEEDINGS(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("CONFERENCEPROCEEDINGS"))
    
    @property
    def ARCHIVEDDOCUMENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("ARCHIVEDDOCUMENT"))
    
    @property
    def PERSONALCORRESPONDENCE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PERSONALCORRESPONDENCE"))
    
    @property
    def PUBLISHEDTRANSLATION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PUBLISHEDTRANSLATION"))
    
    @property
    def UNSPECIFIED(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("UNSPECIFIED"))
    
    


class MethodAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Method")
        self._values: typing.Set[str] = set([  "MEASURED",  "CALCULATED",  "SIMULATED",  "LITERATURE",  ])
        self._vals = MethodValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "MethodValues":
        return self._vals


class MethodViewer(MethodAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class MethodValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def MEASURED(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MEASURED"))
    
    @property
    def CALCULATED(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("CALCULATED"))
    
    @property
    def SIMULATED(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SIMULATED"))
    
    @property
    def LITERATURE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LITERATURE"))
    
    


class ParametersAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Parameters")
        self._values: typing.Set[str] = set([  "TEMPERATURE_K",  "UPPER_TEMPERATURE_K",  "LOWER_TEMPERATURE_K",  "PRESSURE_KPA",  "PARTIAL_PRESSURE_KPA",  "UPPER_PRESSURE_KPA",  "LOWER_PRESSURE_KPA",  "MOLE_FRACTION",  "MASS_FRACTION",  "MOLALITY_MOLKG",  "AMOUNT_CONCENTRATION_MOLARITY_MOLDM3",  "VOLUME_FRACTION",  "RATIO_OF_AMOUNT_OF_SOLUTE_TO_MASS_OF_SOLUTION_MOLKG",  "RATIO_OF_MASS_OF_SOLUTE_TO_VOLUME_OF_SOLUTION_KGM3",  "AMOUNT_RATIO_OF_SOLUTE_TO_SOLVENT",  "MASS_RATIO_OF_SOLUTE_TO_SOLVENT",  "VOLUME_RATIO_OF_SOLUTE_TO_SOLVENT",  "INITIAL_MOLE_FRACTION_OF_SOLUTE",  "FINAL_MOLE_FRACTION_OF_SOLUTE",  "INITIAL_MASS_FRACTION_OF_SOLUTE",  "FINAL_MASS_FRACTION_OF_SOLUTE",  "INITIAL_MOLALITY_OF_SOLUTE_MOLKG",  "FINAL_MOLALITY_OF_SOLUTE_MOLKG",  "SOLVENT_MOLE_FRACTION",  "SOLVENT_MASS_FRACTION",  "SOLVENT_VOLUME_FRACTION",  "SOLVENT_MOLALITY_MOLKG",  "SOLVENT_AMOUNT_CONCENTRATION_MOLARITY_MOLDM3",  "SOLVENT_AMOUNT_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT",  "SOLVENT_MASS_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT",  "SOLVENT_VOLUME_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT",  "SOLVENT_RATIO_OF_AMOUNT_OF_COMPONENT_TO_MASS_OF_SOLVENT_MOLKG",  "SOLVENT_RATIO_OF_COMPONENT_MASS_TO_VOLUME_OF_SOLVENT_KGM3",  "WAVELENGTH_NM",  "FREQUENCY_MHZ",  "MOLAR_VOLUME_M3MOL",  "SPECIFIC_VOLUME_M3KG",  "MASS_DENSITY_KGM3",  "AMOUNT_DENSITY_MOLM3",  "MOLAR_ENTROPY_JKMOL",  "RELATIVE_ACTIVITY",  "ACTIVITY_COEFFICIENT",  "AMOUNT_MOL",  "MASS_KG",  ])
        self._vals = ParametersValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "ParametersValues":
        return self._vals


class ParametersViewer(ParametersAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class ParametersValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def TEMPERATURE_K(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("TEMPERATURE_K"))
    
    @property
    def UPPER_TEMPERATURE_K(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("UPPER_TEMPERATURE_K"))
    
    @property
    def LOWER_TEMPERATURE_K(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LOWER_TEMPERATURE_K"))
    
    @property
    def PRESSURE_KPA(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PRESSURE_KPA"))
    
    @property
    def PARTIAL_PRESSURE_KPA(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PARTIAL_PRESSURE_KPA"))
    
    @property
    def UPPER_PRESSURE_KPA(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("UPPER_PRESSURE_KPA"))
    
    @property
    def LOWER_PRESSURE_KPA(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LOWER_PRESSURE_KPA"))
    
    @property
    def MOLE_FRACTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MOLE_FRACTION"))
    
    @property
    def MASS_FRACTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MASS_FRACTION"))
    
    @property
    def MOLALITY_MOLKG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MOLALITY_MOLKG"))
    
    @property
    def AMOUNT_CONCENTRATION_MOLARITY_MOLDM3(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("AMOUNT_CONCENTRATION_MOLARITY_MOLDM3"))
    
    @property
    def VOLUME_FRACTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("VOLUME_FRACTION"))
    
    @property
    def RATIO_OF_AMOUNT_OF_SOLUTE_TO_MASS_OF_SOLUTION_MOLKG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("RATIO_OF_AMOUNT_OF_SOLUTE_TO_MASS_OF_SOLUTION_MOLKG"))
    
    @property
    def RATIO_OF_MASS_OF_SOLUTE_TO_VOLUME_OF_SOLUTION_KGM3(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("RATIO_OF_MASS_OF_SOLUTE_TO_VOLUME_OF_SOLUTION_KGM3"))
    
    @property
    def AMOUNT_RATIO_OF_SOLUTE_TO_SOLVENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("AMOUNT_RATIO_OF_SOLUTE_TO_SOLVENT"))
    
    @property
    def MASS_RATIO_OF_SOLUTE_TO_SOLVENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MASS_RATIO_OF_SOLUTE_TO_SOLVENT"))
    
    @property
    def VOLUME_RATIO_OF_SOLUTE_TO_SOLVENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("VOLUME_RATIO_OF_SOLUTE_TO_SOLVENT"))
    
    @property
    def INITIAL_MOLE_FRACTION_OF_SOLUTE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("INITIAL_MOLE_FRACTION_OF_SOLUTE"))
    
    @property
    def FINAL_MOLE_FRACTION_OF_SOLUTE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("FINAL_MOLE_FRACTION_OF_SOLUTE"))
    
    @property
    def INITIAL_MASS_FRACTION_OF_SOLUTE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("INITIAL_MASS_FRACTION_OF_SOLUTE"))
    
    @property
    def FINAL_MASS_FRACTION_OF_SOLUTE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("FINAL_MASS_FRACTION_OF_SOLUTE"))
    
    @property
    def INITIAL_MOLALITY_OF_SOLUTE_MOLKG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("INITIAL_MOLALITY_OF_SOLUTE_MOLKG"))
    
    @property
    def FINAL_MOLALITY_OF_SOLUTE_MOLKG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("FINAL_MOLALITY_OF_SOLUTE_MOLKG"))
    
    @property
    def SOLVENT_MOLE_FRACTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_MOLE_FRACTION"))
    
    @property
    def SOLVENT_MASS_FRACTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_MASS_FRACTION"))
    
    @property
    def SOLVENT_VOLUME_FRACTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_VOLUME_FRACTION"))
    
    @property
    def SOLVENT_MOLALITY_MOLKG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_MOLALITY_MOLKG"))
    
    @property
    def SOLVENT_AMOUNT_CONCENTRATION_MOLARITY_MOLDM3(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_AMOUNT_CONCENTRATION_MOLARITY_MOLDM3"))
    
    @property
    def SOLVENT_AMOUNT_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_AMOUNT_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT"))
    
    @property
    def SOLVENT_MASS_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_MASS_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT"))
    
    @property
    def SOLVENT_VOLUME_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_VOLUME_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT"))
    
    @property
    def SOLVENT_RATIO_OF_AMOUNT_OF_COMPONENT_TO_MASS_OF_SOLVENT_MOLKG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_RATIO_OF_AMOUNT_OF_COMPONENT_TO_MASS_OF_SOLVENT_MOLKG"))
    
    @property
    def SOLVENT_RATIO_OF_COMPONENT_MASS_TO_VOLUME_OF_SOLVENT_KGM3(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SOLVENT_RATIO_OF_COMPONENT_MASS_TO_VOLUME_OF_SOLVENT_KGM3"))
    
    @property
    def WAVELENGTH_NM(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("WAVELENGTH_NM"))
    
    @property
    def FREQUENCY_MHZ(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("FREQUENCY_MHZ"))
    
    @property
    def MOLAR_VOLUME_M3MOL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MOLAR_VOLUME_M3MOL"))
    
    @property
    def SPECIFIC_VOLUME_M3KG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SPECIFIC_VOLUME_M3KG"))
    
    @property
    def MASS_DENSITY_KGM3(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MASS_DENSITY_KGM3"))
    
    @property
    def AMOUNT_DENSITY_MOLM3(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("AMOUNT_DENSITY_MOLM3"))
    
    @property
    def MOLAR_ENTROPY_JKMOL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MOLAR_ENTROPY_JKMOL"))
    
    @property
    def RELATIVE_ACTIVITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("RELATIVE_ACTIVITY"))
    
    @property
    def ACTIVITY_COEFFICIENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("ACTIVITY_COEFFICIENT"))
    
    @property
    def AMOUNT_MOL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("AMOUNT_MOL"))
    
    @property
    def MASS_KG(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MASS_KG"))
    
    


class PropertiesAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Properties")
        self._values: typing.Set[str] = set([  "DENSITY",  "SPECIFIC_HEAT_CAPACITY",  "THERMAL_CONDUCTIVITY",  "MELTING_POINT",  "BOILING_POINT",  "VAPOR_PRESSURE",  "COMPRESSIBILITY",  "VISCOSITY",  "PH",  "POLARITY",  ])
        self._vals = PropertiesValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "PropertiesValues":
        return self._vals


class PropertiesViewer(PropertiesAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class PropertiesValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def DENSITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("DENSITY"))
    
    @property
    def SPECIFIC_HEAT_CAPACITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SPECIFIC_HEAT_CAPACITY"))
    
    @property
    def THERMAL_CONDUCTIVITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("THERMAL_CONDUCTIVITY"))
    
    @property
    def MELTING_POINT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MELTING_POINT"))
    
    @property
    def BOILING_POINT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("BOILING_POINT"))
    
    @property
    def VAPOR_PRESSURE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("VAPOR_PRESSURE"))
    
    @property
    def COMPRESSIBILITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("COMPRESSIBILITY"))
    
    @property
    def VISCOSITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("VISCOSITY"))
    
    @property
    def PH(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PH"))
    
    @property
    def POLARITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("POLARITY"))
    
    


class UnitTypeAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("UnitType")
        self._values: typing.Set[str] = set([  "MOLE",  ])
        self._vals = UnitTypeValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "UnitTypeValues":
        return self._vals


class UnitTypeViewer(UnitTypeAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class UnitTypeValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def MOLE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MOLE"))
    
    



# #########################################################################
# Generated classes 13
# #########################################################################

class AuthorAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Author")
        self._properties: typing.Set[str] = set([  "given_name",  "family_name",  "email",  "orcid",  "affiliation",  ])
        self._props = AuthorProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AuthorProperties":
        return self._props


class AuthorViewer(AuthorAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class AuthorProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def given_name(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("given_name"))
    
    @property
    def family_name(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("family_name"))
    
    @property
    def email(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("email"))
    
    @property
    def orcid(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("orcid"))
    
    @property
    def affiliation(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("affiliation"))
    
    


class BaseUnitAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("BaseUnit")
        self._properties: typing.Set[str] = set([  "kind",  "exponent",  "multiplier",  "scale",  ])
        self._props = BaseUnitProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "BaseUnitProperties":
        return self._props


class BaseUnitViewer(BaseUnitAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class BaseUnitProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def kind(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("kind"))
    
    @property
    def exponent(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("exponent"))
    
    @property
    def multiplier(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("multiplier"))
    
    @property
    def scale(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("scale"))
    
    


class CitationAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Citation")
        self._properties: typing.Set[str] = set([  "litType",  "author",  "doi",  "page",  "pub_name",  "title",  "lit_volume_num",  "url_citation",  "publication_year",  ])
        self._props = CitationProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CitationProperties":
        return self._props


class CitationViewer(CitationAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class CitationProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def litType(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("litType"))
    
    @property
    def author(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("author"))
    
    @property
    def doi(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("doi"))
    
    @property
    def page(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("page"))
    
    @property
    def pub_name(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("pub_name"))
    
    @property
    def title(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("title"))
    
    @property
    def lit_volume_num(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("lit_volume_num"))
    
    @property
    def url_citation(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("url_citation"))
    
    @property
    def publication_year(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("publication_year"))
    
    


class CompoundAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Compound")
        self._properties: typing.Set[str] = set([  "pubChemID",  "compound_identifier",  "commonName",  "SELFIE",  "name_IUPAC",  "standard_InChI",  "standard_InChI_key",  ])
        self._props = CompoundProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CompoundProperties":
        return self._props


class CompoundViewer(CompoundAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class CompoundProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def pubChemID(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("pubChemID"))
    
    @property
    def compound_identifier(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("compound_identifier"))
    
    @property
    def commonName(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("commonName"))
    
    @property
    def SELFIE(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("SELFIE"))
    
    @property
    def name_IUPAC(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("name_IUPAC"))
    
    @property
    def standard_InChI(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("standard_InChI"))
    
    @property
    def standard_InChI_key(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("standard_InChI_key"))
    
    


class FAIRFluidsDocumentAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("FAIRFluidsDocument")
        self._properties: typing.Set[str] = set([  "version",  "citation",  "compound",  "fluid",  ])
        self._props = FAIRFluidsDocumentProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "FAIRFluidsDocumentProperties":
        return self._props


class FAIRFluidsDocumentViewer(FAIRFluidsDocumentAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class FAIRFluidsDocumentProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def version(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("version"))
    
    @property
    def citation(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("citation"))
    
    @property
    def compound(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("compound"))
    
    @property
    def fluid(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("fluid"))
    
    


class FluidAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Fluid")
        self._properties: typing.Set[str] = set([  "compounds",  "property",  "parameter",  "measurement",  ])
        self._props = FluidProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "FluidProperties":
        return self._props


class FluidViewer(FluidAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class FluidProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def compounds(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("compounds"))
    
    @property
    def property(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("property"))
    
    @property
    def parameter(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("parameter"))
    
    @property
    def measurement(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("measurement"))
    
    


class MeasurementAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Measurement")
        self._properties: typing.Set[str] = set([  "measurement_id",  "source_doi",  "propertyValue",  "parameterValue",  "method",  "method_description",  ])
        self._props = MeasurementProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "MeasurementProperties":
        return self._props


class MeasurementViewer(MeasurementAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class MeasurementProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def measurement_id(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("measurement_id"))
    
    @property
    def source_doi(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("source_doi"))
    
    @property
    def propertyValue(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("propertyValue"))
    
    @property
    def parameterValue(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("parameterValue"))
    
    @property
    def method(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("method"))
    
    @property
    def method_description(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("method_description"))
    
    


class ParameterAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Parameter")
        self._properties: typing.Set[str] = set([  "parameterID",  "parameter",  "unit",  "associated_compound",  ])
        self._props = ParameterProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ParameterProperties":
        return self._props


class ParameterViewer(ParameterAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class ParameterProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def parameterID(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("parameterID"))
    
    @property
    def parameter(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("parameter"))
    
    @property
    def unit(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("unit"))
    
    @property
    def associated_compound(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("associated_compound"))
    
    


class ParameterValueAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ParameterValue")
        self._properties: typing.Set[str] = set([  "param_id",  "paramDigits",  "paramValue",  "uncertainty",  ])
        self._props = ParameterValueProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ParameterValueProperties":
        return self._props


class ParameterValueViewer(ParameterValueAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class ParameterValueProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def param_id(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("param_id"))
    
    @property
    def paramDigits(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("paramDigits"))
    
    @property
    def paramValue(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("paramValue"))
    
    @property
    def uncertainty(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("uncertainty"))
    
    


class PropertyAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Property")
        self._properties: typing.Set[str] = set([  "propertyID",  "properties",  "unit",  ])
        self._props = PropertyProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PropertyProperties":
        return self._props


class PropertyViewer(PropertyAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class PropertyProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def propertyID(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("propertyID"))
    
    @property
    def properties(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("properties"))
    
    @property
    def unit(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("unit"))
    
    


class PropertyValueAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PropertyValue")
        self._properties: typing.Set[str] = set([  "prop_id",  "propDigits",  "propValue",  "uncertainty",  ])
        self._props = PropertyValueProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PropertyValueProperties":
        return self._props


class PropertyValueViewer(PropertyValueAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class PropertyValueProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def prop_id(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("prop_id"))
    
    @property
    def propDigits(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("propDigits"))
    
    @property
    def propValue(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("propValue"))
    
    @property
    def uncertainty(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("uncertainty"))
    
    


class UnitDefinitionAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("UnitDefinition")
        self._properties: typing.Set[str] = set([  "id",  "name",  "base_units",  ])
        self._props = UnitDefinitionProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "UnitDefinitionProperties":
        return self._props


class UnitDefinitionViewer(UnitDefinitionAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class UnitDefinitionProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def id(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("id"))
    
    @property
    def name(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("name"))
    
    @property
    def base_units(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("base_units"))
    
    


class VersionAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Version")
        self._properties: typing.Set[str] = set([  "versionMajor",  "versionMinor",  ])
        self._props = VersionProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "VersionProperties":
        return self._props


class VersionViewer(VersionAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class VersionProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def versionMajor(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("versionMajor"))
    
    @property
    def versionMinor(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("versionMinor"))
    
    

