# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (14)
# #########################################################################

class Author(BaseModel):
    given_name: typing.Optional[str] = None
    family_name: typing.Optional[str] = None

class C_id(BaseModel):
    c_id: typing.Optional[str] = None

class Citation(BaseModel):
    litType: typing.Optional[types.LitType] = None
    author: typing.List["Author"]

class Compound(BaseModel):
    pubChemID: typing.Optional[int] = None
    compound_identifier: typing.Optional["C_id"] = None
    commonName: typing.Optional[str] = None
    SELFIE: typing.Optional[str] = None
    name_IUPAC: typing.Optional[str] = None
    standard_InChI: typing.Optional[str] = None
    standard_InChI_key: typing.Optional[str] = None

class FAIRFluidsDocument(BaseModel):
    version: typing.Optional["Version"] = None
    citation: typing.Optional["Citation"] = None
    compound: typing.List["Compound"]
    fluid: typing.List["Fluid"]

class Fluid(BaseModel):
    components: typing.List[str]
    source_doi: typing.Optional[str] = None
    property: typing.Optional["Property"] = None
    parameter: typing.List["Parameter"]
    num_value: typing.Optional["NumValue"] = None

class NumValue(BaseModel):
    propertyValue: typing.Optional["PropertyValue"] = None
    parameterValue: typing.Optional["ParameterValue"] = None

class Parameter(BaseModel):
    parameterID: typing.Optional[str] = None
    parameterType: typing.Optional["ParameterType"] = None
    componentID: typing.Optional[int] = None

class ParameterType(BaseModel):
    bio_variables: typing.Optional[types.BioVariables] = None
    component_composition: typing.Optional[types.ComponentComposition] = None
    miscellaneous: typing.Optional[types.Miscellaneous] = None
    participant_amount: typing.Optional[types.ParticipantAmount] = None
    pressure: typing.Optional[types.Pressure] = None
    solvent_composition: typing.Optional[types.SolventComposition] = None
    temperature: typing.Optional[types.Temperature] = None

class ParameterValue(BaseModel):
    varDigits: typing.Optional[int] = None
    varNumber: typing.Optional[str] = None
    varValue: typing.Optional[float] = None

class Property(BaseModel):
    propertyID: typing.Optional[str] = None
    property_information: typing.Optional["Property_Information"] = None

class PropertyValue(BaseModel):
    propDigits: typing.Optional[int] = None
    propNumber: typing.Optional[str] = None
    propValue: typing.Optional[float] = None
    uncertainty: typing.Optional[float] = None

class Property_Information(BaseModel):
    group: typing.Optional[str] = None
    method: typing.Optional[str] = None
    property_name: typing.Optional[str] = None

class Version(BaseModel):
    versionMajor: typing.Optional[int] = None
    versionMinor: typing.Optional[int] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
