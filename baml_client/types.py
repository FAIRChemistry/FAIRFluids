# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (5)
# #########################################################################

class LitType(str, Enum):
    BOOK = "BOOK"
    JOURNAL = "JOURNAL"
    REPORT = "REPORT"
    PATENT = "PATENT"
    THESIS = "THESIS"
    CONFERENCEPROCEEDINGS = "CONFERENCEPROCEEDINGS"
    ARCHIVEDDOCUMENT = "ARCHIVEDDOCUMENT"
    PERSONALCORRESPONDENCE = "PERSONALCORRESPONDENCE"
    PUBLISHEDTRANSLATION = "PUBLISHEDTRANSLATION"
    UNSPECIFIED = "UNSPECIFIED"

class Method(str, Enum):
    MEASURED = "MEASURED"
    CALCULATED = "CALCULATED"
    SIMULATED = "SIMULATED"
    LITERATURE = "LITERATURE"

class Parameters(str, Enum):
    TEMPERATURE_K = "TEMPERATURE_K"
    UPPER_TEMPERATURE_K = "UPPER_TEMPERATURE_K"
    LOWER_TEMPERATURE_K = "LOWER_TEMPERATURE_K"
    PRESSURE_KPA = "PRESSURE_KPA"
    PARTIAL_PRESSURE_KPA = "PARTIAL_PRESSURE_KPA"
    UPPER_PRESSURE_KPA = "UPPER_PRESSURE_KPA"
    LOWER_PRESSURE_KPA = "LOWER_PRESSURE_KPA"
    MOLE_FRACTION = "MOLE_FRACTION"
    MASS_FRACTION = "MASS_FRACTION"
    MOLALITY_MOLKG = "MOLALITY_MOLKG"
    AMOUNT_CONCENTRATION_MOLARITY_MOLDM3 = "AMOUNT_CONCENTRATION_MOLARITY_MOLDM3"
    VOLUME_FRACTION = "VOLUME_FRACTION"
    RATIO_OF_AMOUNT_OF_SOLUTE_TO_MASS_OF_SOLUTION_MOLKG = "RATIO_OF_AMOUNT_OF_SOLUTE_TO_MASS_OF_SOLUTION_MOLKG"
    RATIO_OF_MASS_OF_SOLUTE_TO_VOLUME_OF_SOLUTION_KGM3 = "RATIO_OF_MASS_OF_SOLUTE_TO_VOLUME_OF_SOLUTION_KGM3"
    AMOUNT_RATIO_OF_SOLUTE_TO_SOLVENT = "AMOUNT_RATIO_OF_SOLUTE_TO_SOLVENT"
    MASS_RATIO_OF_SOLUTE_TO_SOLVENT = "MASS_RATIO_OF_SOLUTE_TO_SOLVENT"
    VOLUME_RATIO_OF_SOLUTE_TO_SOLVENT = "VOLUME_RATIO_OF_SOLUTE_TO_SOLVENT"
    INITIAL_MOLE_FRACTION_OF_SOLUTE = "INITIAL_MOLE_FRACTION_OF_SOLUTE"
    FINAL_MOLE_FRACTION_OF_SOLUTE = "FINAL_MOLE_FRACTION_OF_SOLUTE"
    INITIAL_MASS_FRACTION_OF_SOLUTE = "INITIAL_MASS_FRACTION_OF_SOLUTE"
    FINAL_MASS_FRACTION_OF_SOLUTE = "FINAL_MASS_FRACTION_OF_SOLUTE"
    INITIAL_MOLALITY_OF_SOLUTE_MOLKG = "INITIAL_MOLALITY_OF_SOLUTE_MOLKG"
    FINAL_MOLALITY_OF_SOLUTE_MOLKG = "FINAL_MOLALITY_OF_SOLUTE_MOLKG"
    SOLVENT_MOLE_FRACTION = "SOLVENT_MOLE_FRACTION"
    SOLVENT_MASS_FRACTION = "SOLVENT_MASS_FRACTION"
    SOLVENT_VOLUME_FRACTION = "SOLVENT_VOLUME_FRACTION"
    SOLVENT_MOLALITY_MOLKG = "SOLVENT_MOLALITY_MOLKG"
    SOLVENT_AMOUNT_CONCENTRATION_MOLARITY_MOLDM3 = "SOLVENT_AMOUNT_CONCENTRATION_MOLARITY_MOLDM3"
    SOLVENT_AMOUNT_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT = "SOLVENT_AMOUNT_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT"
    SOLVENT_MASS_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT = "SOLVENT_MASS_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT"
    SOLVENT_VOLUME_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT = "SOLVENT_VOLUME_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT"
    SOLVENT_RATIO_OF_AMOUNT_OF_COMPONENT_TO_MASS_OF_SOLVENT_MOLKG = "SOLVENT_RATIO_OF_AMOUNT_OF_COMPONENT_TO_MASS_OF_SOLVENT_MOLKG"
    SOLVENT_RATIO_OF_COMPONENT_MASS_TO_VOLUME_OF_SOLVENT_KGM3 = "SOLVENT_RATIO_OF_COMPONENT_MASS_TO_VOLUME_OF_SOLVENT_KGM3"
    WAVELENGTH_NM = "WAVELENGTH_NM"
    FREQUENCY_MHZ = "FREQUENCY_MHZ"
    MOLAR_VOLUME_M3MOL = "MOLAR_VOLUME_M3MOL"
    SPECIFIC_VOLUME_M3KG = "SPECIFIC_VOLUME_M3KG"
    MASS_DENSITY_KGM3 = "MASS_DENSITY_KGM3"
    AMOUNT_DENSITY_MOLM3 = "AMOUNT_DENSITY_MOLM3"
    MOLAR_ENTROPY_JKMOL = "MOLAR_ENTROPY_JKMOL"
    RELATIVE_ACTIVITY = "RELATIVE_ACTIVITY"
    ACTIVITY_COEFFICIENT = "ACTIVITY_COEFFICIENT"
    AMOUNT_MOL = "AMOUNT_MOL"
    MASS_KG = "MASS_KG"

class Properties(str, Enum):
    DENSITY = "DENSITY"
    SPECIFIC_HEAT_CAPACITY = "SPECIFIC_HEAT_CAPACITY"
    THERMAL_CONDUCTIVITY = "THERMAL_CONDUCTIVITY"
    MELTING_POINT = "MELTING_POINT"
    BOILING_POINT = "BOILING_POINT"
    VAPOR_PRESSURE = "VAPOR_PRESSURE"
    COMPRESSIBILITY = "COMPRESSIBILITY"
    VISCOSITY = "VISCOSITY"
    PH = "PH"
    POLARITY = "POLARITY"

class UnitType(str, Enum):
    MOLE = "MOLE"

# #########################################################################
# Generated classes (13)
# #########################################################################

class Author(BaseModel):
    given_name: str
    family_name: str
    email: str
    orcid: str
    affiliation: str

class BaseUnit(BaseModel):
    kind: UnitType
    exponent: int
    multiplier: float
    scale: float

class Citation(BaseModel):
    litType: LitType
    author: typing.List["Author"]
    doi: str
    page: str
    pub_name: str
    title: str
    lit_volume_num: str
    url_citation: str
    publication_year: str

class Compound(BaseModel):
    pubChemID: int
    compound_identifier: int
    commonName: str
    SELFIE: str
    name_IUPAC: str
    standard_InChI: str
    standard_InChI_key: str

class FAIRFluidsDocument(BaseModel):
    version: "Version"
    citation: "Citation"
    compound: typing.List["Compound"]
    fluid: typing.List["Fluid"]

class Fluid(BaseModel):
    compounds: typing.List[int]
    property: typing.List["Property"]
    parameter: typing.List["Parameter"]
    measurement: typing.List["Measurement"]

class Measurement(BaseModel):
    measurement_id: int
    source_doi: str
    propertyValue: typing.List["PropertyValue"]
    parameterValue: typing.List["ParameterValue"]
    method: Method
    method_description: str

class Parameter(BaseModel):
    parameterID: int
    parameter: Parameters
    unit: "UnitDefinition"
    associated_compound: int

class ParameterValue(BaseModel):
    param_id: int
    paramDigits: int
    paramValue: float
    uncertainty: float

class Property(BaseModel):
    propertyID: int
    properties: Properties
    unit: "UnitDefinition"

class PropertyValue(BaseModel):
    prop_id: int
    propDigits: int
    propValue: float
    uncertainty: float

class UnitDefinition(BaseModel):
    id: str
    name: str
    base_units: typing.List["BaseUnit"]

class Version(BaseModel):
    versionMajor: int
    versionMinor: int

# #########################################################################
# Generated type aliases (0)
# #########################################################################
