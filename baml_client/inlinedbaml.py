# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> MyClient {\n\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:11434/v1\"\n    model phi4:latest\n  }\n\n}\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.201.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "resume.baml": "// Auto-generated BAML definitions\n\nclass FAIRFluidsDocument {\n  version Version @description(\"Version of the FAIRFluidsDocument\")\n  citation Citation @description(\"Add information about the datareport\")\n  compound Compound[] @description(\"What Compounds are in the fluid\")\n  fluid Fluid[] @description(\"Specifcations of the Fluid\")\n}\nclass Version {\n  versionMajor int @description(\"Add the major version number to your datareport\")\n  versionMinor int @description(\"Add the minor version number to your datareport\")\n}\nclass Citation {\n  litType LitType @description(\"indicates the type of source document (book, journal, report, patent, thesis, conference proceedings, archived document, personal correspondence, published translation, unspecified).\")\n  author Author[] @description(\"X\")\n}\nclass Author {\n  given_name string @description(\"Name of the Author\")\n  family_name string @description(\"Family name ot the author or contributor\")\n}\nclass Compound {\n  pubChemID int \n  compound_identifier C_id @description(\"Unique Id of the compund in this datareport\")\n  commonName string @description(\"The generic name of a substance, e.g. H20 - Water\")\n  SELFIE string @description(\"SELFIES Representation from the Molecule\")\n  name_IUPAC string \n  standard_InChI string \n  standard_InChI_key string \n}\nclass C_id {\n  c_id string @description(\"Unique id of the compound\")\n}\nclass Fluid {\n  components string[] @description(\"Add the ID of the compund into the fluid\")\n  source_doi string @description(\"The source where the data come form\")\n  property Property @description(\"Property [complex] (Fig. 8) is characterized by Property-MethodID [complex], which identifies the property and experimental method used;\")\n  parameter Parameter[] @description(\"A variable refers to an independent experimental parameter that varies across data points within a data set. Examples include temperature, pressure, composition, and other input conditions under which thermodynamic properties are measured. A constraint refers to a condition or a fixed parameter that applies to an entire data set, rather than to each individual data point. Constraints are used to define experimental or calculated conditions that remain constant across all the measurements in a data set. Examples might include fixed composition, pressure, or volume during an experiment.\")\n  num_value NumValue @description(\"Actual meassurement data\")\n}\nclass Property {\n  propertyID string @description(\"Unique ID of the fluid property\")\n  property_information Property_Information @description(\"An identfication to which group the porperty belongs to\")\n}\nclass Property_Information {\n  group string @description(\"To which group does the property belong: volumetricProp_, TransportProp, HeatCapacityAndDerivedProp, ExcessPartialApparentEnergyProp, CompositionAtPhaseEquilibrium\")\n  method string @description(\"How was the property obtained. (Maybe add prediction field)\")\n  property_name string @description(\"What is the name of the property, eg. Mass Density, (and Units?)\")\n}\nclass Parameter {\n  parameterID string \n  parameterType ParameterType @description(\"Name of the Variable- e.g. Temerpature\")\n  componentID int @description(\"Add to Identify to which compound the variable applies to\")\n}\nclass ParameterType {\n  bio_variables BioVariables \n  component_composition ComponentComposition \n  miscellaneous Miscellaneous \n  participant_amount ParticipantAmount \n  pressure Pressure \n  solvent_composition SolventComposition \n  temperature Temperature \n}\nclass NumValue {\n  propertyValue PropertyValue \n  parameterValue ParameterValue \n}\nclass PropertyValue {\n  propDigits int \n  propNumber string \n  propValue float @description(\"Actual value of the property\")\n  uncertainty float \n}\nclass ParameterValue {\n  varDigits int \n  varNumber string \n  varValue float @description(\"Actual value of the variable\")\n}\n\nenum LitType {\n  BOOK\n  JOURNAL\n  REPORT\n  PATENT\n  THESIS\n  CONFERENCEPROCEEDINGS\n  ARCHIVEDDOCUMENT\n  PERSONALCORRESPONDENCE\n  PUBLISHEDTRANSLATION\n  UNSPECIFIED\n}\nenum Temperature {\n  TEMPERATURE_K\n  UPPER_TEMPERATURE_K\n  LOWER_TEMPERATURE_K\n}\nenum Pressure {\n  PRESSURE_KPA\n  PARTIAL_PRESSURE_KPA\n  UPPER_PRESSURE_KPA\n  LOWER_PRESSURE_KPA\n}\nenum ComponentComposition {\n  MOLE_FRACTION\n  MASS_FRACTION\n  MOLALITY_MOLKG\n  AMOUNT_CONCENTRATION_MOLARITY_MOLDM3\n  VOLUME_FRACTION\n  RATIO_OF_AMOUNT_OF_SOLUTE_TO_MASS_OF_SOLUTION_MOLKG\n  RATIO_OF_MASS_OF_SOLUTE_TO_VOLUME_OF_SOLUTION_KGM3\n  AMOUNT_RATIO_OF_SOLUTE_TO_SOLVENT\n  MASS_RATIO_OF_SOLUTE_TO_SOLVENT\n  VOLUME_RATIO_OF_SOLUTE_TO_SOLVENT\n  INITIAL_MOLE_FRACTION_OF_SOLUTE\n  FINAL_MOLE_FRACTION_OF_SOLUTE\n  INITIAL_MASS_FRACTION_OF_SOLUTE\n  FINAL_MASS_FRACTION_OF_SOLUTE\n  INITIAL_MOLALITY_OF_SOLUTE_MOLKG\n  FINAL_MOLALITY_OF_SOLUTE_MOLKG\n}\nenum SolventComposition {\n  SOLVENT_MOLE_FRACTION\n  SOLVENT_MASS_FRACTION\n  SOLVENT_VOLUME_FRACTION\n  SOLVENT_MOLALITY_MOLKG\n  SOLVENT_AMOUNT_CONCENTRATION_MOLARITY_MOLDM3\n  SOLVENT_AMOUNT_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT\n  SOLVENT_MASS_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT\n  SOLVENT_VOLUME_RATIO_OF_COMPONENT_TO_OTHER_COMPONENT_OF_BINARY_SOLVENT\n  SOLVENT_RATIO_OF_AMOUNT_OF_COMPONENT_TO_MASS_OF_SOLVENT_MOLKG\n  SOLVENT_RATIO_OF_COMPONENT_MASS_TO_VOLUME_OF_SOLVENT_KGM3\n}\nenum Miscellaneous {\n  WAVELENGTH_NM\n  FREQUENCY_MHZ\n  MOLAR_VOLUME_M3MOL\n  SPECIFIC_VOLUME_M3KG\n  MASS_DENSITY_KGM3\n  AMOUNT_DENSITY_MOLM3\n  MOLAR_ENTROPY_JKMOL\n  RELATIVE_ACTIVITY\n  ACTIVITY_COEFFICIENT\n}\nenum BioVariables {\n  PH\n  IONIC_STRENGTH_MOLALITY_BASIS_MOLKG\n  IONIC_STRENGTH_AMOUNT_CONCENTRATION_BASIS_MOLDM3\n  PC_AMOUNT_CONCENTRATION_BASIS\n  SOLVENT_PC_AMOUNT_CONCENTRATION_BASIS\n}\nenum ParticipantAmount {\n  AMOUNT_MOL\n  MASS_KG\n}\n\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> FAIRFluidsDocument {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"MyClient\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      <?xml version='1.0' encoding='UTF-8'?>\n<!-- Generated by the ITT, Institute of Thermodynamics and Thermal Process Engineering, University of Stuttgart, Germany (http://www.itt.uni-stuttgart.de) -->\n<DataReport xmlns=\"http://www.iupac.org/namespaces/ThermoML\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.iupac.org/namespaces/ThermoML http://trc.nist.gov/ThermoML.xsd\">\n  <Version>\n    <nVersionMajor>2</nVersionMajor>\n    <nVersionMinor>0</nVersionMinor>\n  </Version>\n  <Citation>\n    <eType>journal</eType>\n    <eSourceType>Original</eSourceType>\n    <sAuthor>Spera, Marcelle B. M.</sAuthor>\n    <sAuthor>Darouich, Samir</sAuthor>\n    <sAuthor>Pleiss, Jurgen</sAuthor>\n    <sAuthor>Hansen, Niels</sAuthor>\n    <sPubName>Fluid Phase Equilib.</sPubName>\n    <yrPubYr>2025</yrPubYr>\n    <dateCit>2025-01-02</dateCit>  \n    <sTitle>Influence of water content on thermophysical properties of aqueous glyceline solutions predicted by molecular dynamics simulations</sTitle>\n    <sAbstract>Molecular simulations allow the prediction of a large variety of thermophysical properties for complex mixtures based on one underlying model, i.e. the force field. In the present work static and dynamic properties of aqueous 1:2 choline chloride:glycerol mixtures are computed by molecular dynamics simulations with the aim to report robust simulation protocols that allow for a thorough evaluation of the molecular model with regard to experimental data. In particular for the shear viscosity a rather strong dependence of the results on the simulation method can be found. The simulations do not only provide quantitative data but also insight into the effect of water on the microscopic structure of the fluid. The isobaric thermal expansivity shows a transition from DES-like to water-like behavior beyond a water mole fraction of 0.75. Moreover, inconsistencies in experimental datasets are identified. Molecular dynamics simulations serve as a powerful tool to support the decision for one or the other data set in case of contradictory experimental data.</sAbstract>\n    <sKeyword>Molecular simulation</sKeyword>    \n    <sKeyword>Eutectic solvents</sKeyword>        \n    <sKeyword>Water content</sKeyword>    \n    <sKeyword>Density</sKeyword>        \n    <sKeyword>Viscosity</sKeyword>    \n    <sDOI>10.1016/j.fluid.2024.114324</sDOI>\n    <sVol>592</sVol>\n    <sPage>114324</sPage>\n  </Citation>\n  <Compound>\n    <nPubChemID>305</nPubChemID>\n    <RegNum>\n      <nOrgNum>1</nOrgNum>\n    </RegNum>\n    <sCommonName>choline</sCommonName>\n    <sCommonName>Choline ion</sCommonName>\n    <sCommonName>Bilineurine</sCommonName>\n    <sFormulaMolec>C5H14NO+</sFormulaMolec>\n    <sIUPACName>2-hydroxyethyl(trimethyl)azanium</sIUPACName>\n    <sStandardInChI>InChI=1S/C5H14NO/c1-6(2,3)4-5-7/h7H,4-5H2,1-3H3/q+1</sStandardInChI>\n    <sStandardInChIKey>OEYIOHPDSNJKLS-UHFFFAOYSA-N</sStandardInChIKey>\n  </Compound>\n  <Compound>\n    <nPubChemID>312</nPubChemID>\n    <RegNum>\n      <nOrgNum>2</nOrgNum>\n    </RegNum>\n    <sCommonName>16887-00-6</sCommonName>\n    <sCommonName>chloride</sCommonName>\n    <sCommonName>chloride ion</sCommonName>\n    <sFormulaMolec>Cl-</sFormulaMolec>\n    <sIUPACName>chloride</sIUPACName>\n    <sStandardInChI>InChI=1S/ClH/h1H/p-1</sStandardInChI>\n    <sStandardInChIKey>VEXZGXHMUGYJMC-UHFFFAOYSA-M</sStandardInChIKey>\n  </Compound>\n  <Compound>\n    <nPubChemID>753</nPubChemID>\n    <RegNum>\n      <nOrgNum>3</nOrgNum>\n    </RegNum>\n    <sCommonName>glycerol</sCommonName>\n    <sCommonName>glycerin</sCommonName>\n    <sCommonName>56-81-5</sCommonName>\n    <sFormulaMolec>C3H8O3</sFormulaMolec>\n    <sIUPACName>propane-1,2,3-triol</sIUPACName>\n    <sStandardInChI>InChI=1S/C3H8O3/c4-1-3(6)2-5/h3-6H,1-2H2</sStandardInChI>\n    <sStandardInChIKey>PEDCQBHIVMGVHV-UHFFFAOYSA-N</sStandardInChIKey>\n  </Compound>\n  <Compound>\n    <nPubChemID>962</nPubChemID>\n    <RegNum>\n      <nOrgNum>4</nOrgNum>\n    </RegNum>\n    <sCommonName>water</sCommonName>\n    <sCommonName>7732-18-5</sCommonName>\n    <sCommonName>Distilled water</sCommonName>\n    <sFormulaMolec>H2O</sFormulaMolec>\n    <sIUPACName>oxidane</sIUPACName>\n    <sStandardInChI>InChI=1S/H2O/h1H2</sStandardInChI>\n    <sStandardInChIKey>XLYOFNOQVPJJNP-UHFFFAOYSA-N</sStandardInChIKey>\n  </Compound>\n  <Compound>\n    <nPubChemID>280</nPubChemID>\n    <RegNum>\n      <nOrgNum>5</nOrgNum>\n    </RegNum>\n    <sCommonName>carbon dioxide</sCommonName>\n    <sCommonName>carbonic anhydride</sCommonName>\n    <sCommonName>Dry ice</sCommonName>\n    <sFormulaMolec>CO2</sFormulaMolec>\n    <sStandardInChI>InChI=1S/CO2/c2-1-3</sStandardInChI>\n    <sStandardInChIKey>CURLTUGMZLYLDI-UHFFFAOYSA-N</sStandardInChIKey>\n  </Compound>\n  <Compound>\n    <nPubChemID>977</nPubChemID>\n    <RegNum>\n      <nOrgNum>6</nOrgNum>\n    </RegNum>\n    <sCommonName>7782-44-7</sCommonName>\n    <sCommonName>O</sCommonName>\n    <sCommonName>Oxygen</sCommonName>\n    <sCommonName>oxygen</sCommonName>\n    <sFormulaMolec>O2</sFormulaMolec>\n    <sIUPACName>molecular oxygen</sIUPACName>\n    <sStandardInChI>InChI=1S/O2/c1-2</sStandardInChI>\n    <sStandardInChIKey>MYMOFIZGZYHOMD-UHFFFAOYSA-N</sStandardInChIKey>\n  </Compound>\n  <PureOrMixtureData>\n    <Component>\n      <RegNum>\n        <nOrgNum>4</nOrgNum>\n      </RegNum>\n    </Component>\n    <PhaseID>\n      <ePhase>Liquid</ePhase>\n    </PhaseID>\n    <Property>\n      <ePresentation>Direct value, X</ePresentation>\n      <nPropNumber>1</nPropNumber>\n      <Property-MethodID>\n        <PropertyGroup>\n          <VolumetricProp>\n            <eMethodName>N/A</eMethodName>\n            <ePropName>Mass density, kg/m3</ePropName>\n            <Prediction>\n              <ePredictionType>Molecular dynamics</ePredictionType>\n              <sPredictionMethodDescription>Simulations in NPT ensemble.</sPredictionMethodDescription>\n            </Prediction>\n          </VolumetricProp>\n        </PropertyGroup>\n      </Property-MethodID>\n      <CombinedUncertainty>\n        <eCombUncertEvalMethod>Standard deviation over 3 copies of the same system with different initial velocities.</eCombUncertEvalMethod>\n        <nCombUncertAssessNum>1</nCombUncertAssessNum>\n        <nCombUncertLevOfConfid>95.0</nCombUncertLevOfConfid>\n        <sCombUncertEvalMethod>Data file compiler</sCombUncertEvalMethod>\n      </CombinedUncertainty>\n      <PropPhaseID>\n        <ePropPhase>Liquid</ePropPhase>\n      </PropPhaseID>\n    </Property>\n    <Constraint>\n      <ConstraintID>\n        <ConstraintType>\n          <eComponentComposition>Mole fraction</eComponentComposition>\n        </ConstraintType>\n        <RegNum>\n          <nOrgNum>4</nOrgNum>\n        </RegNum>\n      </ConstraintID>\n      <nConstrDigits>5</nConstrDigits>\n      <nConstraintValue>1.0</nConstraintValue>\n      <nConstraintNumber>1</nConstraintNumber>\n    </Constraint>\n    <Constraint>\n      <ConstraintID>\n        <ConstraintType>\n          <ePressure>Pressure, kPa</ePressure>\n        </ConstraintType>\n      </ConstraintID>\n      <nConstrDigits>3</nConstrDigits>\n      <nConstraintValue>100.0</nConstraintValue>\n      <nConstraintNumber>2</nConstraintNumber>\n    </Constraint>\n    <NumValues>\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return _file_map